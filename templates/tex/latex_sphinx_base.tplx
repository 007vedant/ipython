((============================================================================
  NBConvert Sphinx-Latex Template

  Purpose: Allow export of PDF friendly Latex inspired by Sphinx.  Most of the
           template is derived directly from Sphinx source.

  Inheritance: null>display_priority>latex_base 

  ==========================================================================))

((*- extends 'latex_base.tplx' -*))

% Header, overrides base
((* block header *))
    
    % Make sure that the sphinx doc style knows who it inherits from.
    \def\sphinxdocclass{(((parentdocumentclass)))}

    % Declare the document class
    \documentclass[letterpaper,10pt,english]{sphinx(((documentclass)))}
    
    % Imports    
    \usepackage[utf8]{inputenc}
    \DeclareUnicodeCharacter{00A0}{\\nobreakspace} 
    \usepackage[T1]{fontenc}
    \usepackage{babel}
    \usepackage{times}
    \usepackage{import}
    \usepackage[Bjarne]{fncychap}
    \usepackage{longtable}
    \usepackage{sphinx}
    \usepackage{multirow}

    % Document level variables
    \title{((( nb.metadata.name )))} 
    \date{\today}
    \release{} 
    \author{Unknown Author}
    \newcommand{\sphinxlogo}{}
    \renewcommand{\releasename}{Release} 
    \makeindex

    
    ((* block sphinxheader *))((* endblock sphinxheader *)) 

((* endblock header *))

% Body
((* block bodyBegin *))

    % Start of the document
    \begin{document}
        \maketitle
        \tableofcontents 
((* endblock bodyBegin *))
((* block bodyEnd *))


        \renewcommand{\indexname}{Index}
        \printindex
    \end{document}
((* endblock bodyEnd *))

% Footer
((* block footer *))
((* endblock footer *))

((*- block headingcell-*))

    ((= Prevent trim =))
    ((("\n")))
    
    ((*- if cell.level == 1 -*))
        \part
    ((*- elif cell.level == 2 -*))
        \chapter
    ((*- elif cell.level == 3 -*))
        \section
    ((*- elif cell.level == 4 -*))
        \subsection
    ((*- elif cell.level == 5 -*))
        \subsubsection
    ((*- elif cell.level == 6 -*))
        \paragraph
    ((*- endif -*)){((( cell.source )))}
((*- endblock headingcell -*))

((*- block rawcell -*))
    ((("\n")))

    \setbox0\vbox{
    \begin{minipage}{0.95\linewidth}
        ((( cell.source )))
    \end{minipage}}
    \begin{center}\setlength{\fboxsep}{5pt}
    \shadowbox{\box0}\end{center}

((*- endblock rawcell -*))

((*- block codecell scoped -*))
    ((*- block input_group -*))
        ((*- block in_prompt -*))((*- endblock in_prompt -*))
        ((*- block input -*))((*- endblock input -*))
    ((*- endblock input_group -*))
        ((*- if cell.outputs -*))
    ((*- block output_group -*))
            ((*- block output_prompt -*))((*- endblock output_prompt -*))
            ((*- block outputs -*))
                ((*- for output in cell.outputs -*))
                    ((*- if output.output_type in ['pyout'] -*))
                        ((*- block pyout scoped -*))((*- endblock pyout -*))
                    ((*- elif output.output_type in ['stream'] -*))
                        ((*- block stream scoped -*))
                            ((*- if output.stream in ['stdout'] -*))
                                ((*- block stream_stdout scoped -*))
                                ((*- endblock stream_stdout -*))
                            ((*- elif output.stream in ['stderr'] -*))
                                ((*- block stream_stderr scoped -*))
                                ((*- endblock stream_stderr -*))
                            ((*- endif -*))
                        ((*- endblock stream -*))
                    ((*- elif output.output_type in ['display_data'] -*))
                        ((*- block display_data scoped -*))
                            ((*- block data_priority scoped -*))
                            ((*- endblock data_priority -*))
                        ((*- endblock display_data -*))
                    ((*- elif output.output_type in ['pyerr'] -*))
                        ((*- block pyerr scoped -*))
                        ((*- for line in output.traceback -*))
                            ((*- block traceback_line scoped -*))((*- endblock traceback_line -*))
                        ((*- endfor -*))
                        ((*- endblock pyerr -*))
                    ((*- endif -*))
                ((*- endfor -*))
            ((*- endblock outputs -*))
    ((*- endblock output_group -*))
        ((*- endif -*))
((*- endblock codecell -*))

((*- block markdowncell scoped-*))
((*- endblock markdowncell -*))

((*- block unknowncell scoped-*))
((*- endblock unknowncell -*))
